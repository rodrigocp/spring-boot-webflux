version: '3'

services:
    elasticsearch:
        container_name: elasticsearch
        restart: unless-stopped
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        networks: [public, internal]
        ports: ['9200:9200', '9300:9300']
        volumes: [~/Documentos/Volumes/ELK:/usr/share/elasticsearch/data]
        environment:
            http:host: 0.0.0.0
            discovery.type: single-node

    kibana:
        container_name: kibana
        restart: unless-stopped
        image: docker.elastic.co/kibana/kibana:7.10.0
        depends_on: [elasticsearch]
        networks: [public, internal]
        ports: ['5601:5601']
        environment:
            ELASTICSEARCH_HOSTS: 'http://elasticsearch:9200'
            PACK_GRAPH_ENABLED: 'true'
            XPACK_WATCHER_ENABLED: 'true'
            XPACK_ML_ENABLED: 'true'
            XPACK_MONITORING_ENABLED: 'true'
            XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: 'true'

    logstash:
        container_name: logstash
        restart: unless-stopped
        image: docker.elastic.co/logstash/logstash:7.10.0
        depends_on: [elasticsearch]
        networks: [public, internal]
        ports: ['5000:5000']
        volumes: [./logstash/:/usr/share/logstash/pipeline/]
        environment:
            XPACK/MONITORING.ELASTICSEARCH.HOSTS: 'http://elastic:9200'

    redis:
        container_name: redis
        restart: unless-stopped
        image: redis
        command: redis-server --requirepass "postgres"
        networks: [public, internal]
        ports: ['6379:6379']

    mongo:
        container_name: mongo
        restart: unless-stopped
        image: mongo
        networks: [public, internal]
        ports: ['27017:27017']
        environment:
            MONGO_INITDB_ROOT_USERNAME: postgres
            MONGO_INITDB_ROOT_PASSWORD: postgres
            MONGO_INITDB_DATABASE: authentication

    postgres:
        container_name: postgres
        restart: unless-stopped
        image: postgres
        networks: [public, internal]
        ports: ['5430:5432']
        environment:
            POSTGRES_USERNAME: postgres
            POSTGRES_PASSWORD: postgres

    eureka:
        container_name: eureka-service
        restart: unless-stopped
        build: ./eureka
        networks: [public, internal]
        ports: ['8761:8761']

    account:
        container_name: account-service
        restart: unless-stopped
        build: ./account
        depends_on: [mongo, eureka]
        ports: ['8070:8070']
        networks: [public, internal]
        environment:
            spring.data.mongodb.host: mongo
            eureka.client.service-url.defaultZone: http://eureka:8761/eureka/

    gateway:
        container_name: gateway-service
        restart: unless-stopped
        build: ./gateway
        depends_on: [account, logstash]
        ports: ['8080:8080']
        networks: [public, internal]
        environment:
            eureka.client.service-url.defaultZone: http://eureka:8761/eureka/

networks:
    public:
        name: net-public
        driver: bridge
        internal: false

    internal:
        name: net-internal
        driver: bridge
        internal: true